}
results <- c(mean(Xmean), mean(Ymean), mean(XD), mean(YD))
results <- matrix(results, 2,2)
colnames(results) <- c("估计均值","估计均方误差")
rownames(results) <- c("放回抽样", "不放回抽样")
results
N <- 401 # 总体中个体总数
x <- sin((1:N) * pi / 10)
n <- 20
pMean <- mean(x)
groupN <- N/n
groupN <- floor(groupN)
tmpRange <- N - (n-1) * groupN
tmpFirst <- sample(1:tmpRange, 1)
tmpIndx <- tmpFirst + (0:(n-1)) * groupN
tmpS <- x[tmpIndx]
sMean <- mean(tmpS)
cat("样本均值和总体均值的距离", abs(pMean- sMean))
k <- sample(1:20,1)
if(k==1){
tmpIndex <- 1:21
} else
{
tmp <- k-1
tmpIndex <- (2+20*tmp):(1+20*k)
}
tmpS <- x[tmpIndex]
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(v=0.3)
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3)
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
# 2.43 程序
i <- 1:10000
x_bar <- c()
for (j in i){
xi <- rbinom(10*j,1,0.3)
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i*10, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
x <- rhyper(max(10000) * i, 10, 990, 50)
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * i, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j]))
}
plot(i, x_bar, type="l")
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * i, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.5)
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * i, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j*10]))
}
plot(i, x_bar, type="l")
abline(h=0.5)
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * i, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j*10]))
}
plot(i, x_bar, type="l")
abline(h=0.5)
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * 10, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j*10]))
}
plot(i, x_bar, type="l")
abline(h=0.5)
# 2.44 程序
i = 1:10000
x <- rhyper(max(10000) * 10, 10, 990, 50)
x_bar <- c()
for (j in i){
x_bar <- c(x_bar, mean(x[1:j*10]))
}
plot(i, x_bar, type="l")
abline(h=0.5, lty=2, lwd=2, col="red")
# 2.44 程序
i = 1:10000
x_bar <- c()
for (j in i){
x <- rhyper(j * 10, 10, 990, 50)
x_bar <- c(x_bar, mean(x))
}
plot(i, x_bar, type="l")
abline(h=0.5, lty=2, lwd=2, col="red")
# 2.44 程序
i = 1:10000
x_bar <- c()
for (j in i){
xi <- rhyper(j * 10, 10, 990, 50)
x_bar <- c(x_bar, mean(xi))
}
plot(i, x_bar, type="l")
abline(h=0.5, lty=2, lwd=2, col="red")
# 2.49 程序
simluation_B <- binom(100, 10000,0.3)
# 2.49 程序
simluation_B <- rbinom(100, 10000,0.3)
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
for (n in c(10,100,1000)) {
sim_freq <- c(sim_freq,mean(simulation_B <= 5555))
}
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
for (n in c(10,100,1000)) {
sim_freq <- c(sim_freq,mean(sim_B <= 5555))
}
sim_freq
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
for (n in c(10,100,1000)) {
sim_freq <- c(sim_freq,mean(sim_B <= 5555))
}
sim_freq
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
for (n in c(10,100,1000)) {
sim_freq <- c(sim_freq,mean(sim_B <= 5555))
}
sim_freq - pbinom(5555, 10000,0.3)
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
true_prob <= pbinom(5555, 10000,0.3)
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", true_prob - tmp_freq,sep="")
}
# 2.49 程序
sim_B <- rbinom(100, 10000,0.3)
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", true_prob - tmp_freq,sep=""))
}
# 2.49 程序
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
sim_B <- rbinom(n, 10000,0.3)
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", true_prob - tmp_freq,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", true_prob - tmp_freq,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", true_prob - tmp_freq,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", abs_diff,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", abs_diff,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000,10000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", abs_diff,sep=""))
}
# 2.49 程序
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
sim_B <- rbinom(n, 10000,0.3)
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", abs_diff,sep=""))
}
# 2.49 程序
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
sim_B <- rbinom(n, 10000,0.3)
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距 ", abs_diff,sep=""))
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000,10000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
print(paste("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距", abs_diff,sep=""))
}
# 2.54 程序
Y <- runif(1000, 0,1)
f_Y = Y^2 * exp(Y^2)
# 2.54 程序
Y <- runif(1000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
# 2.54 程序
Y <- runif(1000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为 ", estim_int, "，实际的计算结果为：", true_int$value)
# 2.54 程序
Y <- runif(10000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
Y <- runif(1000000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
Y <- runif(1000000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
Y <- runif(1000000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
Y <- runif(1000000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
Y <- runif(10000, 0,1)
f_Y = Y^2 * exp(Y^2)
estim_int <- mean(f_Y) * (1-0)
true_int <- integrate(function(x) x^2 * exp(x^2), 0,1)
cat("蒙特卡洛模拟的结果为", estim_int, "，实际的计算结果为", true_int$value)
# 2.54 程序
mu = 173.61
sigma = 4.96^2
mean_sigma = sigma / 16
up = pnorm(178.57, mu, mean_sigma)
low = pnorm(168.65, mu, mean_sigma)
up - low
# 2.54 程序
mu = 173.61
sigma = 4.96^2
mean_sigma = sigma / 16
up = pnorm(178.57, mu, sqrt(mean_sigma))
low = pnorm(168.65, mu, sqrt(mean_sigma))
up - low
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
x_bar - 0.3
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
for (i in 1:3) {
cat(i)
}
for (i in 1:3) {
cat(i, "\n")
}
# 2.52 程序
sim_freq <- c()
true_prob <- punif(0.5, -10, 10)
for (n in c(10,100,1000,10000)) {
sim_U <- runif(n, -10,10)
tmp_freq <- mean(sim_U <= 0.5)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
cat("重复观测数为",n,"的估计结果为", tmp_freq, "其和真实值之间的差距", abs_diff,"\n")
}
# 2.49 程序
sim_freq <- c()
true_prob <- pbinom(5555, 10000,0.3)
for (n in c(10,100,1000)) {
sim_B <- rbinom(n, 10000,0.3)
tmp_freq <- mean(sim_B <= 5555)
sim_freq <- c(sim_freq,tmp_freq)
abs_diff <- abs(true_prob - tmp_freq)
cat("重复观测数为 ",n," 的估计结果为 ", tmp_freq, " 其和真实值之间的差距 ", abs_diff,"\n")
}
# 2.54 程序
x <- runif(10000,0,1)
f <- x^2*exp(x^2)
p <- (1-0)*mean(f)
cat("蒙特卡洛方法估算的定积分:", integral_approx, "\n")
# 2.54 程序
x <- runif(10000,0,1)
f <- x^2*exp(x^2)
p <- (1-0)*mean(f)
cat("蒙特卡洛方法估算的定积分:", integral_approx, "\n")
# 2.54 程序
x <- runif(10000,0,1)
f <- x^2*exp(x^2)
p <- (1-0)*mean(f)
cat("蒙特卡洛方法估算的定积分:", p, "\n")
cls
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
x <- sample(1:6,100,T)
bar_x <- mean(x)
bar_x
# 2.43 程序
i<-c(1:10000)
for(i in 1:10000){
xi<-rbinom(10*i,1,0.3)
bar_x<-c()
for(j in 1:i*10){
bar_x<-c(bar_x,mean(xi[1:j]))
}
plot(bar_x,type="l",lwd=1,xlab="i",ylab="bar_x",col="red")
}
# 2.49 程序
x<-rbinom(5555,10000,0.3)
F<-(sum(x<=5555))/5555
F
pbinom(5555,10000,0.3)
# 2.52 程序
x<-rbinom(0.5,-10,10)
F<-(sum(x<=0.5)/0.5)
F
punif(0.5,-10,10)
# 2.54 程序
Y<-runif(1000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(1000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(1000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(1000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(100000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(100000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.54 程序
Y<-runif(1000,0,1)
c<-(Y^2)
f<-c*exp(Y^2)
p<-(1-0)*mean(f)
p
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
# 2.43 程序
i <- 1:10000
xi <- rbinom(10*max(i),1,0.3)
x_bar <- c()
for (j in 10*i){
x_bar <- c(x_bar, mean(xi[1:j]))
}
plot(i, x_bar, type="l")
abline(h=0.3, col="red", lty=2, lwd=2)
